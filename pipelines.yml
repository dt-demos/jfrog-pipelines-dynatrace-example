resources:
  - name: gitRepo
    type: GitRepo
    configuration:
      gitProvider: githubIntegration                      # Name of GitHub integration, which provides connectivity to GitHub repo
      path: dt-demos/jfrog-pipelines-dynatrace-example    # GitHub Repo path, if path is modified, change the resource name as well
      branches:
        include: demo
      buildOn:
        commit: true
  
  - name: catalogFileSpec
    type: FileSpec
    configuration:
      sourceArtifactory: artifactoryIntegration
      pattern: "art-maven-dynatrace/demos/dt-orders/catalog-service/1/catalog-service-1.jar"
      recursive: false
      flat: true

  - name: catalogDockerImage
    type: Image
    configuration:
      registry: artifactoryIntegration                                    # Name of Docker integration in Artifactory instance
      sourceRepository: default-docker-local                              # Docker repository name
      imageName: dynatracedemos.jfrog.io/art-docker-dynatrace/catalog       # Docker image name
      imageTag: ${run_number}

  - name: catalogBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration         # Your Artifactory integration
      buildName: catalog                                  # The name of the application image
      buildNumber: ${run_number}

  - name: catalogHelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: artifactoryIntegration       # Your Artifactory integration
      repository: art_dynatrace_charts                # Helm chart repository in your Artifactory instance
      chart: catalog                                  # The name of the Helm chart
      version: 0.1.0                              

pipelines:
  - name: dynatraceDemo
    configuration:
      environmentVariables:
        readOnly:
          RELEASE_NAME: "catalog"
        catalog-version:
          default: 1
          allowCustom: true
    steps:
      - name: DockerBuild
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: gitRepo
            - name: catalogFileSpec
          dockerFileLocation: catalog      # Relative location of the Dockerfile in the GitHub repo
          dockerFileName: Dockerfile
          dockerImageName: dynatracedemos.jfrog.io/art-docker-dynatrace/catalog
          dockerImageTag: ${run_number}
          dockerOptions: --build-arg RESOURCE_PATH=${res_catalogFileSpec_resourcePath}
        execution:
          onStart:
            - echo ${res_catalogFileSpec_resourcePath}
            - ls -l ${res_catalogFileSpec_resourcePath}

      - name: DockerPush
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: artifactoryIntegration                  # Your Artifactory integration
          targetRepository: art-docker-dynatrace            # Docker repository, where the image will be pushed
          inputSteps:
            - name: DockerBuild
          outputResources:
            - name: catalogBuildInfo                         # Build info updated after the step execution
            - name: catalogDockerImage                       # Docker image resource, created after the step execution

      - name: MakeNamespace
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: k8sIntegration
          inputResources:
            - name: gitRepo
          inputSteps:
            - name: DockerPush
        execution:
          onExecute:
            - kubectl config current-context
            - $res_gitRepo_resourcePath/makeNamespace.sh dev

      - name: HelmPublish
        type: HelmPublish
        configuration:
          affinityGroup: helm_install
          helmVersion: 3                                    # Use Helm version 3 to build the Helm chart
          chartPath: chart
          inputSteps:
            - name: MakeNamespace
          inputResources:
            - name: gitRepo
              trigger: false
            - name: catalogDockerImage
          outputResources:
            - name: catalogHelmChart                        # Helm chart will be created and pushed to the repo, declared in catalogHelmChart resource
        execution:
          onStart:
            - APP_VERSION=0.0.$run_number
            - VALUES_IMAGE=${res_catalogDockerImage_imageName}
            - VALUES_TAG=${res_catalogDockerImage_imageTag}
            - echo "CHART_VERSION = $CHART_VERSION"
            - echo "VALUES_IMAGE = $VALUES_IMAGE"
            - echo "VALUES_TAG = $VALUES_TAG"
            - pushd $res_gitRepo_resourcePath/chart
            - "sed -ie \"s|^image: .*$|image: $VALUES_IMAGE|\" values.yaml"
            - "sed -ie \"s|^imageTag: .*$|imageTag: $VALUES_TAG|\" values.yaml"
            - "sed -ie \"s|^appVersion: .*$|appVersion: $APP_VERSION|\" Chart.yaml"
            - cat values.yaml
            - cat Chart.yaml
            - popd

      - name: HelmDeploy
        type: HelmDeploy
        configuration:
          lint: true
          dryRun: true 
          helmVersion: 3
          affinityGroup: helm_install
          releaseName: catalog
          integrations:
            - name: k8sIntegration
            - name: artifactoryIntegration
          inputResources:
            - name: catalogHelmChart
            - name: catalogDockerImage
          inputSteps:
            - name: HelmPublish
        execution:
          onStart:
            - kubectl config current-context
            - add_run_variables CLUSTER="$(kubectl config current-context)"
          onSuccess:
            - kubectl get pods --all-namespaces

      - name: modifyHelmChartProperties
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: catalogHelmChart
          inputSteps:
            - name: HelmDeploy
        execution:
          onExecute:
            - printenv
            - echo "Modifying helm chart properties"
            - echo "${int_artifactoryIntegration_url}/api/storage/art_dynatrace_charts/catalog-${res_catalogHelmChart_version}.tgz"
            - echo "deployedOnCluster=${CLUSTER}"
            - echo "helmInstallationName=${RELEASE_NAME}"
            - echo "deploymentTimestamp=${TIME}"
            - echo "Set current time as a deployment time"
            - TIME=$(date +%s)
            - curl -v --location --request PUT "${int_artifactoryIntegration_url}/api/storage/art_dynatrace_charts/catalog-${res_catalogHelmChart_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onFailure:
            - echo "Failure"

      - name: postDynatraceEvent
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: dynatraceIntegration
          inputResources:
            - name: gitRepo
            - name: catalogHelmChart
          inputSteps:
            - name: modifyHelmChartProperties
        execution:
          onExecute:
            - DT_BASEURL=${int_dynatraceIntegration_DT_URL}
            - DT_API_TOKEN=${int_dynatraceIntegration_DT_API_TOKEN}
            - DEPLOYMENT_PROJECT=dt-orders
            - TAG_STAGE=dev
            - TAG_SERVICE=order-service
            - DEPLOYMENT_VERSION=${run_number}
            - CI_BACK_LINK="https://www.jfrog.com"
            - SOURCE="JFrog pipeline"
            - OUTPUT=$($res_gitRepo_resourcePath/sendDynatraceEvent.sh ${DT_BASEURL} ${DT_API_TOKEN} ${DEPLOYMENT_PROJECT} ${TAG_STAGE} ${TAG_SERVICE} ${DEPLOYMENT_VERSION} ${CI_BACK_LINK} ${SOURCE})
          onSuccess:
            - echo "$OUTPUT"
          onFailure:
            - echo "$OUTPUT" 