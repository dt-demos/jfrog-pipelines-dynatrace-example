# https://www.jfrog.com/confluence/display/JFROG/MvnBuild
# https://www.jfrog.com/confluence/display/JFROG/Setting+Up+Maven+Builds+for+Pipelines
# https://www.jfrog.com/confluence/display/RTF6X/Maven+Artifactory+Plugin

resources:
  - name: gitRepo
    type: GitRepo
    configuration:
      gitProvider: githubIntegration                      # Name of GitHub integration, which provides connectivity to GitHub repo
      path: dt-demos/jfrog-pipelines-dynatrace-example    # GitHub Repo path, if path is modified, change the resource name as well
      branches:
        include: demo
      buildOn:
        commit: true
  
  - name: catalogDockerImage
    type: Image
    configuration:
      registry: artifactoryIntegration                                    # Name of Docker integration in Artifactory instance
      sourceRepository: default-docker-local                              # Docker repository name
      imageName: dynatracedemos.jfrog.io/art-docker-dynatrace/catalog       # Docker image name
      imageTag: ${run_number}

  - name: catalogBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration         # Your Artifactory integration
      buildName: catalog                                  # The name of the application image
      buildNumber: ${run_number}

  - name: catalogHelmChartBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration         # Your Artifactory integration
      buildName: catalog                                  # The name of the application Helm chart
      buildNumber: '0.1.${run_number}'                  # Starting build number, the following will be 0.0.1

  - name: catalogHelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: artifactoryIntegration       # Your Artifactory integration
      repository: art_dynatrace_charts                # Helm chart repository in your Artifactory instance
      chart: catalog                                    # The name of the Helm chart
      version: 0.1.0                                  

pipelines:
  - name: dynatraceDemo
    configuration:
      environmentVariables:
        readOnly:
          RELEASE_NAME: "catalog"
    steps:
      - name: DockerBuild
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: gitRepo
          dockerFileLocation: catalog      # Relative location of the Dockerfile in the GitHub repo
          dockerFileName: Dockerfile
          dockerImageName: dynatracedemos.jfrog.io/art-docker-dynatrace/catalog
          dockerImageTag: ${run_number}

      - name: DockerPush
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: artifactoryIntegration                  # Your Artifactory integration
          targetRepository: art-docker-dynatrace            # Docker repository, where the image will be pushed
          inputSteps:
            - name: DockerBuild
          outputResources:
            - name: catalogBuildInfo                         # Build info updated after the step execution
            - name: catalogDockerImage                       # Docker image resource, created after the step execution

      - name: HelmPublish
        type: HelmPublish
        configuration:
          helmVersion: 3                                    # Use Helm version 3 to build the Helm chart
          chartPath: chart
          affinityGroup: helm_install
          inputSteps:
            - name: DockerPush
          inputResources:
            - name: gitRepo
              trigger: false
          outputResources:
            - name: catalogHelmChart                        # Helm chart will be created and pushed to the repo, declared in catalogHelmChart resource
            - name: catalogHelmChartBuildInfo
        execution:
          onStart:
            - printenv
          onFailure:
            - echo "Failure"

      - name: HelmDeploy
        type: HelmDeploy
        configuration:
          helmVersion: 3
          affinityGroup: helm_install
          releaseName: catalog${run_number}
          integrations:
            - name: k8sIntegration
          inputResources:
            - name: catalogHelmChart
            - name: catalogDockerImage
          inputSteps:
            - name: HelmPublish
          valueFilePaths:
            - chart/values.yaml
        execution:
          onStart:
            - kubectl config current-context
            - add_run_variables CLUSTER="$(kubectl config current-context)"
          onSuccess:
            - kubectl get pods
          onFailure:
            - echo "Failure"

      - name: modifyHelmChartProperties
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: catalogHelmChart
          inputSteps:
            - name: HelmDeploy
        execution:
          onExecute:
            - printenv
            - echo "Modifying helm chart properties"
            - echo "${int_artifactoryIntegration_url}/api/storage/art_dynatrace_charts/catalog-${res_catalogHelmChart_version}.tgz"
            - echo "deployedOnCluster=${CLUSTER}"
            - echo "helmInstallationName=${RELEASE_NAME}"
            - echo "deploymentTimestamp=${TIME}"
            - echo "Set current time as a deployment time"
            - TIME=$(date +%s)
            - curl -v --location --request PUT "${int_artifactoryIntegration_url}/api/storage/art_dynatrace_charts/catalog-${res_catalogHelmChart_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onFailure:
            - echo "Failure"

      - name: postDynatraceEvent
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
            - name: dynatraceIntegration
          inputResources:
            - name: gitRepo
            - name: catalogHelmChart
          inputSteps:
            - name: modifyHelmChartProperties
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - JSONOutput=$(curl --location --request GET "${int_artifactoryIntegration_url}/api/storage/art_dynatrace_charts/catalog-${res_catalogHelmChart_aa_version}.tgz?properties=helmInstallationName,chart.version,deployedOnCluster,vcs.url" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}" | jq .)
            - echo $JSONOutput
            - ChartVersion=$(echo $JSONOutput | jq '.properties."chart.version"[0]')
            - HelmInstallationName=$(echo $JSONOutput | jq '.properties.helmInstallationName[0]')s
            - VCS_URL=$(echo $JSONOutput | jq '.properties."vcs.url"[0]')
            - DeployedOnCluster=$(echo $JSONOutput | jq '.properties.deployedOnCluster[0]')
            - curl -H 'Content-Type:application/json' --location --request POST "${int_dynatraceIntegration_DT_URL}.live.dynatrace.com/api/v1/events"  -H 'Accept:application/json' -HAuthorization:"Api-Token ${int_dynatraceIntegration_DT_API_TOKEN}" -d "{\"eventType\":\"CUSTOM_DEPLOYMENT\",\"attachRules\":{\"tagRule\":{\"meTypes\":\"SERVICE\",\"tags\":[{\"context\":\"CONTEXTLESS\",\"key\":\"service\",\"value\":\"catalog\"}]}},\"deploymentName\":\"RuntimeDeployment\",\"deploymentVersion\":\"${res_catalogHelmChart_version}\",\"deploymentProject\":\"Dynatrace Demo\",\"source\":\"${int_artifactoryIntegration_url}\",\"customProperties\":{\"ChartVersion\":${ChartVersion},\"JFrogArtifactoryUrl\":\"${int_artifactoryIntegration_url}\",\"HelmInstallationName\":${HelmInstallationName},\"RunNumber\":\"${run_number}\",\"DeployedOnCluster\":${DeployedOnCluster},\"VCS_URL\":${VCS_URL},\"DockerImageName\":\"${build_image_dockerImageName}\"}}"
          onSuccess:
            - echo ""
          onFailure:
            - echo "Failure"  